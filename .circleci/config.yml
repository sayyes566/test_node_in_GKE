# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#



version: 2
jobs:
  build-1:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image:  google/cloud-sdk
      working_directory: ~
    steps:
      - checkout
      - run:
          name: run tests
          command: |
            echo "-----start test:"
            python simple_test.py
            echo "-----end test"
      - run:
          name: run config
          command: |    
            echo "----run gcp config"
            gcloud --quiet components update
            apt-get update && sudo apt-get --only-upgrade install kubectl google-cloud-sdk google-cloud-sdk-app-engine-grpc google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-go google-cloud-sdk-datastore-emulator google-cloud-sdk-app-engine-python google-cloud-sdk-cbt google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java
            
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ./gcloud-service-key.json
            gcloud auth activate-service-account --key-file=./gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            echo "-----end config"
            
      - run:
         name:prepare to deploy
         command:|
           echo "----run prepare to deploy"
           docker build -t gcr.io/$GOOGLE_PROJECT_ID/hello-circleci-app:v1 .
           gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v1
           gcloud container clusters create hello-circleci-cluster --num-nodes=2
           kubectl run hello-circleci-web --image=gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v1 --port 8080
           kubectl expose deployment hello-circleci-web --type=LoadBalancer --port 80 --target-port 8080
           kubectl scale deployment hello-circleci-web --replicas=2
           echo "-----end deploy"

            
  deploy-part:
    docker:
      - image: google/cloud-sdk
      working_directory: ~
    steps:
     - run:
          name: run config
          command: |       
            gcloud --quiet components update
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ./gcloud-service-key.json
            gcloud auth activate-service-account --key-file=./gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - run:
         name:prepare to deploy
         command:|
           echo "----run prepare to deploy"
           docker build -t gcr.io/$GOOGLE_PROJECT_ID/hello-circleci-app:v1 .
           gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v1
           gcloud container clusters create hello-circleci-cluster --num-nodes=2
           kubectl run hello-circleci-web --image=gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v1 --port 8080
           kubectl expose deployment hello-circleci-web --type=LoadBalancer --port 80 --target-port 8080
           kubectl scale deployment hello-circleci-web --replicas=2
           echo "-----end deploy"
      - run:
          name: Decode and Store Service Account
          command: |
            echo "-----start deploy:"
            docker build -t gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v2 .
            gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v2
            kubectl set image deployment/hello-circleci-web hello-circleci-web=gcr.io/${GOOGLE_PROJECT_ID}/hello-app:v2
            kubectl expose deployment hello-circleci-web --type=LoadBalancer --port 80 --target-port 8080
            echo "-----finish"

        
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - deploy-part
      - build-1:
        requires:
          deploy-part
